return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
coef(fit)[2]
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/10):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
print(cor(trace.mse.weighted[idx], 1:length(idx), method='spearman'))
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx] ~ idx)
print(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2)))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/10):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx] ~ idx)
print(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2)))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/10):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx] ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/10):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/median(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
temp = inspectEM(m3, m3$counts)
temp = inspectEM(da, da$counts)
temp = inspectEM(f4, f4$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/10):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/mad(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/10):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/sd(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
temp = inspectEM(m3, m3$counts)
temp = inspectEM(da, da$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/10):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/sd(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(mean(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
temp = inspectEM(m3, m3$counts)
temp = inspectEM(da, da$counts)
temp = inspectEM(f4, f4$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/10):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/sd(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/20):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/sd(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
temp = inspectEM(m3, m3$counts)
temp = inspectEM(da, da$counts)
temp = inspectEM(f4, f4$counts)
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/30):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/sd(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
temp = inspectEM(m3, m3$counts)
temp = inspectEM(da, da$counts)
temp = inspectEM(f4, f4$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/25):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/sd(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
temp = inspectEM(m3, m3$counts)
temp = inspectEM(da, da$counts)
temp = inspectEM(f4, f4$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/25):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/sd(trace.mse.weighted[idx]) ~ idx)
print(c(as.numeric(coef(fit)[2]), sqrt(median(resid(fit)^2))))
if(sqrt(median(resid(fit)^2)) > 1e-7) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
##trace.mse <- beem.obj$trace.mse
##trace.mse[1:round(length(trace.mse)/3)] <- Inf
##min.mse <- min(trace.mse)
##em.idx <- which((trace.mse-min.mse) < beem.obj$epsilon/5*min.mse)
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/25):length(trace.mse.weighted)
plot(trace.mse.weighted[idx])
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/sd(trace.mse.weighted[idx]) ~ idx)
if(sqrt(median(resid(fit)^2)) > 0.5 && coef(fit)[2]>0 ) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
temp = inspectEM(m3, m3$counts)
temp = inspectEM(da, da$counts)
temp = inspectEM(f4, f4$counts)
inspectEM <- function(beem.obj, counts){
if(NROW(counts) <7){
warning('You have less than 7 species. The estimation of parameters might be inaccurate.')
}
trace.mse.weighted <- beem.obj$trace.mse.weighted
idx <- round(length(trace.mse.weighted)/25):length(trace.mse.weighted)
if(min(trace.mse.weighted) > trace.mse.weighted[2]){
warning('Optimization failed.') ## worse fit than CSS (first iteration)
return(NA)
}
if( sum(trace.mse.weighted[idx] > 1e-5)/length(idx) > 0.3 ){
warning('Poor fitting detected.') ## too many iterations with large MSE
return(NA)
}
if( cor(trace.mse.weighted[idx], 1:length(idx), method='spearman') < -0.5){
## dicreasing error
return(0)
}
fit <- lm(trace.mse.weighted[idx]/mad(trace.mse.weighted[idx]) ~ idx)
if(sqrt(median(resid(fit)^2)) > 0.5 && coef(fit)[2]>0 ) {
warning('Poor convergence detected.') ## not smooth enough
return(NA)
}
return(0)
}
temp = inspectEM(r3, r3$counts) #
temp = inspectEM(r7, r7$counts) #
temp = inspectEM(r8, r8$counts) #
temp = inspectEM(r9, r9$counts) # xxx -- not long enough to detect
temp = inspectEM(db, db$counts)
temp = inspectEM(m3, m3$counts)
temp = inspectEM(da, da$counts)
temp = inspectEM(f4, f4$counts)
